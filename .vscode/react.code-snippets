{
  "Fluido - Component": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "flc",
    "body": [
      "interface ${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/}Props {$1}",
      "",
      "const ${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/}: React.FunctionComponent<${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/}Props> = () => {",
      "  return (",
      "    <div>$2</div>",
      "  )",
      "}",
      "",
      "export default ${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/}"
    ]
  },
  "Fluido - Component with forwardRef": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "flcr",
    "body": [
      "import { forwardRef } from 'react'",
      "",
      "interface ${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/}Props {$1}",
      "",
      "const ${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/} = forwardRef<any, ${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/}Props>(({}, ref) => {",
      "  return (",
      "    <div ref={ref}>$2</div>",
      "  )",
      "})",
      "",
      "export default ${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/}"
    ]
  },
  "Fluido - Styled Component": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "flsc",
    "body": [
      "import styled from 'styled-components'",
      "",
      "interface ${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/}Props {$2}",
      "",
      "const Styled${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/} = styled.${1:div}``",
      "",
      "const ${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/}: React.FunctionComponent<${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/}Props> = () => {",
      "  return (",
      "    <Styled${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/}>$3</Styled${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/}>",
      "  )",
      "}",
      "",
      "export default ${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/}"
    ]
  },
  "Fluido - Styled Component with forwardRef": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "flscr",
    "body": [
      "import { forwardRef } from 'react'",
      "import styled from 'styled-components'",
      "",
      "interface ${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/}Props {$2}",
      "",
      "const Styled${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/} = styled.${1:div}``",
      "",
      "const ${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/} = forwardRef<any, ${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/}Props>(({}, ref) => {",
      "  return (",
      "    <Styled${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/} ref={ref}>$3</Styled${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/}>",
      "  )",
      "})",
      "",
      "export default ${TM_DIRECTORY/^.+[\\\\\\/](.*)$/${1:/pascalcase}/}"
    ]
  },
  "Fluido - Page": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "flpg",
    "body": [
      "import { NextPage } from 'next'",
      "import Head from 'next/head'",
      "import { useTranslation } from 'react-i18next'",
      "",
      "interface ${1:${TM_FILENAME_BASE/.*/${0:/pascalcase}/}}PageProps {}",
      "",
      "const ${1:${TM_FILENAME_BASE/.*/${0:/pascalcase}/}}Page: NextPage<${1:${TM_FILENAME_BASE/.*/${0:/pascalcase}/}}PageProps> = () => {",
      "  const { t } = useTranslation()",
      "",
      "  return (",
      "    <>",
      "      <Head>",
      "        <title>",
      "          {process.env.PROJECT_NAME} - {t('page.${2:${TM_FILENAME_BASE/.*/${0:/camelcase}/}}')}",
      "        </title>",
      "      </Head>",
      "      <h1>${3:${TM_FILENAME_BASE/.*/${0:/pascalcase}/}} Page</h1>",
      "    </>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE/.*/${0:/pascalcase}/}}Page"
    ]
  },
  "Fluido - Page Static Data": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "flpgs",
    "body": [
      "import { GetStaticProps, NextPage } from 'next'",
      "import Head from 'next/head'",
      "import { useTranslation } from 'react-i18next'",
      "import { joinStaticProps } from '@fluido/react-utils'",
      "",
      "interface ${1:${TM_FILENAME_BASE/.*/${0:/pascalcase}/}}PageProps {}",
      "",
      "const ${1:${TM_FILENAME_BASE/.*/${0:/pascalcase}/}}Page: NextPage<${1:${TM_FILENAME_BASE/.*/${0:/pascalcase}/}}PageProps> = () => {",
      "  const { t } = useTranslation()",
      "",
      "  return (",
      "    <>",
      "      <Head>",
      "        <title>",
      "          {process.env.PROJECT_NAME} - {t('page.${2:${TM_FILENAME_BASE/.*/${0:/camelcase}/}}')}",
      "        </title>",
      "      </Head>",
      "      <h1>${3:${TM_FILENAME_BASE/.*/${0:/pascalcase}/}} Page</h1>",
      "    </>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE/.*/${0:/pascalcase}/}}Page",
      "",
      "export const getStaticProps = joinStaticProps()",
      ""
    ]
  },
  "Fluido - Hooks": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "flhk",
    "body": [
      "import { createState, useState } from '@hookstate/core'",
      "",
      "interface ${TM_FILENAME_BASE/.*/${0:/pascalcase}/}Props {",
      "  ${1:[key: string]: any}",
      "}",
      "",
      "const ${TM_FILENAME_BASE/.*/${0:/pascalcase}/}State = createState<${TM_FILENAME_BASE/.*/${0:/pascalcase}/}Props>(${2:null})",
      "",
      "const use${TM_FILENAME_BASE/.*/${0:/pascalcase}/} = () => useState<${TM_FILENAME_BASE/.*/${0:/pascalcase}/}Props>(${TM_FILENAME_BASE/.*/${0:/pascalcase}/}State)",
      "",
      "export default use${TM_FILENAME_BASE/.*/${0:/pascalcase}/}"
    ]
  },
  "Fluido - Model Schema": {
    "scope": "javascript,typescript",
    "prefix": "flms",
    "body": [
      "import MainDataBase from 'app-server/db-connection'",
      "import { Document, Model, Schema } from 'mongoose'",
      "",
      "interface ${TM_FILENAME_BASE/.*/${0:/pascalcase}/}Interface extends Document {}",
      "",
      "const MODEL_NAME = '${TM_FILENAME_BASE/.*/${0:/pascalcase}/}'",
      "",
      "const get${TM_FILENAME_BASE/.*/${0:/pascalcase}/}Model = async () => {",
      "  const mdb = await MainDataBase",
      "  if (MODEL_NAME in mdb.models)",
      "    return mdb.models[MODEL_NAME] as Model<${TM_FILENAME_BASE/.*/${0:/pascalcase}/}Interface>",
      "",
      "  const schema = new Schema<${TM_FILENAME_BASE/.*/${0:/pascalcase}/}Interface>()",
      "",
      "  return mdb.model<${TM_FILENAME_BASE/.*/${0:/pascalcase}/}Interface>(MODEL_NAME, schema)",
      "}",
      "",
      "export default get${TM_FILENAME_BASE/.*/${0:/pascalcase}/}Model"
    ]
  },
  "Fluido - Model Schema with Discriminator": {
    "scope": "javascript,typescript",
    "prefix": "flmsd",
    "body": [
      "import MainDataBase from 'app-server/db-connection'",
      "import { Document, Model, Schema } from 'mongoose'",
      "",
      "interface ${TM_FILENAME_BASE/.*/${0:/pascalcase}/}Interface extends Document {}",
      "",
      "const MODEL_NAME = '${TM_FILENAME_BASE/.*/${0:/pascalcase}/}'",
      "",
      "const get${TM_FILENAME_BASE/.*/${0:/pascalcase}/}Model = async () => {",
      "  const mdb = await MainDataBase",
      "  if (MODEL_NAME in mdb.models)",
      "    return mdb.models[MODEL_NAME] as Model<${TM_FILENAME_BASE/.*/${0:/pascalcase}/}Interface>",
      "",
      "  const ${1:OtherModel} = get${1:OtherModel}Model()",
      "",
      "  const schema = new Schema<${TM_FILENAME_BASE/.*/${0:/pascalcase}/}Interface>({},{ discriminatorKey: '${2:discriminatorKey}' })",
      "",
      "  return ${1:OtherModel}.discriminator(MODEL_NAME, schema)",
      "}",
      "",
      "export default get${TM_FILENAME_BASE/.*/${0:/pascalcase}/}Model"
    ]
  },
  "Fluido - API With Body": {
    "scope": "javascript,typescript",
    "prefix": "flapb",
    "body": [
      "import { api } from '@fluido/react-utils'",
      "import { Validator } from 'express-json-validator-middleware'",
      "import { JSONSchema7 } from 'json-schema'",
      "import firebaseAdmin from 'app-server/firebase-admin-init'",
      "import { StatusCodes, ReasonPhrases } from 'http-status-codes'",
      "",
      "const bodySchema: JSONSchema7 = {",
      "  type: 'object',",
      "  properties: {},",
      "}",
      "",
      "const validator = new Validator({ allErrors: true })",
      "",
      "export default api.MiddlewareWrapper(",
      "  api.blockRequestMethod('POST'),",
      "  api.verifyToken,",
      "  api.loadFirebaseClaims(firebaseAdmin.app(), process.env.AUTOMATION_KEYS),",
      "  validator.validate({ body: bodySchema }),",
      "  (request: api.AppRequest, response: api.AppResponse) => {",
      "    if (!request.user)",
      "      return response",
      "        .status(StatusCodes.UNAUTHORIZED)",
      "        .json({ message: ReasonPhrases.UNAUTHORIZED })",
      "",
      "    Promise.resolve(true)",
      "      .then(async () => {",
      "        response",
      "          .status(StatusCodes.OK)",
      "          .json({ message: ReasonPhrases.OK })",
      "      })",
      "      .catch((err) => {",
      "        console.error(err)",
      "        response",
      "          .status(StatusCodes.BAD_REQUEST)",
      "          .json({ message: ReasonPhrases.BAD_REQUEST })",
      "      })",
      "  },",
      ")"
    ]
  },
  "Fluido - API Simple": {
    "scope": "javascript,typescript",
    "prefix": "flap",
    "body": [
      "import { api } from '@fluido/react-utils'",
      "import firebaseAdmin from 'app-server/firebase-admin-init'",
      "import { StatusCodes, ReasonPhrases } from 'http-status-codes'",
      "",
      "export default api.MiddlewareWrapper(",
      "  api.blockRequestMethod('GET'),",
      "  api.verifyToken,",
      "  api.loadFirebaseClaims(firebaseAdmin.app(), process.env.AUTOMATION_KEYS),",
      "  (request: api.AppRequest, response: api.AppResponse) => {",
      "    if (!request.user)",
      "      return response",
      "        .status(StatusCodes.UNAUTHORIZED)",
      "        .json({ message: ReasonPhrases.UNAUTHORIZED })",
      "",
      "    Promise.resolve(true)",
      "      .then(async () => {",
      "        response",
      "          .status(StatusCodes.OK)",
      "          .json({ message: ReasonPhrases.OK })",
      "      })",
      "      .catch((err) => {",
      "        console.error(err)",
      "        response.status(400).json({ message: 'invalid' })",
      "      })",
      "  },",
      ")"
    ]
  }
}
